import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class main {
    public static void main(String[] args) throws IOException{

        // we expect exactly one argument: the name of the input file
        if (args.length!=1) {
            System.err.println("\n");
            System.err.println("Impl Interpreter\n");
            System.err.println("=================\n\n");
            System.err.println("Please give as input argument a filename\n");
            System.exit(-1);
        }
        String filename=args[0];

        // open the input file
        CharStream input = CharStreams.fromFileName(filename);
        //new ANTLRFileStream (filename); // depricated

        // create a lexer/scanner
        implLexer lex = new implLexer(input);  // lex is opject

        // get the stream of tokens from the scanner
        CommonTokenStream tokens = new CommonTokenStream(lex);

        // create a parser
        implParser parser = new implParser(tokens);

        // and parse anything from the grammar for "start"
        ParseTree parseTree = parser.start();

        // Construct an interpreter and run it on the parse tree
        Interpreter interpreter = new Interpreter();
        Double result=interpreter.visit(parseTree);   // den skal s√∏ger for pars 3
        System.out.println("The result is: "+result);
    }
}

// We write an interpreter that implements interface
// "implVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Double.

class Interpreter extends AbstractParseTreeVisitor<Double> implements implVisitor<Double> {  // implementer alle
    // todo - Java will complain that "Interpreter" does not in fact
    // implement "implVisitor" at the moment.


    public Double visitStart(implParser.Starttext ctx){
        System.out.println("Evaluationg Start ");
        return visit(ctx.e)
    }
    public Double visitadd(implParser.AddContext ctx){
        Double d1= visit(ctx.e1);
        Double d2= visit(ctx.e2);
        if (ctx.op.getText().equels("+"))
            return d1+d2;
        else return d1-d2;

    };
    public Double visitMult(implParser.MultContext ctx){
        Double d1= visit(ctx.e1);
        Double d2= visit(ctx.e2);
        System.out.println("Addition"+d1+ctx.op.getText()+d2);
        if (ctx.op.getText().equels("+"))
            return d1*d2;
        else return d1/d2;
    }
    public Double visitVar(implParser.VarContext ctx)
    {
        System.err.println(" variables not yet supported." );
        system.exit(-1)
        return null;

    };
    public Double visitConst(implParser.ConstContext ctx){

        return  Double.ValueOf(ctx.f.getText());
    };
    public Double visitParantic(implParser.ParanticContext ctx) {

        return visit(ctx.e);
    }


}

// 2-(5+3.14)
